/*
 * Utilities.c
 *
 *  Created on: 31 Jul 2017
 *      Author: Cundell
 */
#include "Utilities.h"
#include <math.h>



/*
 * Function that receives parameters and outputs via UART to enable firmware debugging.
 * class: The class that the debug function is been called from
 * function: The function that the debug function is been called from
 * msg: The msg to be printed
 * type code for the debug message (error_code, warning_code, verbose_code)
 */

void debug_StartUp()
{
	debug_Write("AccelMonitor", "-", 0,StartUp_code, "Version: %s\n", Version_Number);
}

void debug_Write(const char* className, const char* function, uint16_t lineNo, int type, char* msg, ...)
{
	char* string;
	va_list args;

	va_start(args, msg);

	if(0 > vasprintf(&string, msg, args)) string = NULL;    //this is for logging, so failed allocation is not fatal
	va_end(args);

	if(type <= debug_Level)
	{
		char errorTypeArr [10];
		switch (type)
		{
		case Error_code:
			sprintf(errorTypeArr,"Error");
			break;

		case Warning_code:
			sprintf(errorTypeArr,"Warning");
			break;

		case Verbose_code:
			sprintf(errorTypeArr,"Verbose");
			break;
		case Info_code:
			sprintf(errorTypeArr,"Info");
			break;
		case StartUp_code:
			sprintf(errorTypeArr,"\nStarting");
			break;
		}

		char classNameTmp [32];
		char *path2 = strdup(className);
		strcpy(classNameTmp , basename(path2));
		printf("%s, %s, %s, %d, %s\n", errorTypeArr, classNameTmp, function, lineNo, string);
	}
}

char *basename(char const *path)
{
	char *s = {0};
	s = strrchr(path, '/');
	if (!s)
	{
		return strdup(path);
	}
	else
	{
		return strdup(s + 1);
	}
}

/*Converts Cartesian to Spherical coordinates
 * INPUT 	-- XYZ[0] = X, XYZ[1] = Y, XYZ[2] = Z
 * OUTPUT 	-- sphere[0] = r, sphere[1] = theta, sphere[2] = phi
 */

void CartToSpherical(double * XYZ, double* sphere)
{

	double r = sqrt(pow(XYZ[0],2) + pow(XYZ[1], 2) + pow(XYZ[2], 2));
	sphere[0] = r;

	if(XYZ[0] == 0)
	{
		XYZ[0] = 0.000000001;
	}

	double theta = atan(XYZ[1]/XYZ[0]);

	sphere[1] = theta*(180.0 / M_PI);
	if(XYZ[0] < 0 && XYZ[1] > 0)
	{
		sphere[1] = 180 + sphere[1];
	}else if(XYZ[0] < 0 && XYZ[1] < 0)
	{
		sphere[1] = -180 + sphere[1];
	}
	if(r != 0)
	{
		double phi = acos(XYZ[2]/r);
		sphere[2] = phi* (180.0 / M_PI);
	}else
	{
		sphere[2] = 0;
	}
}

/*Converts Spherical to Cartesian coordinates
 * INPUT 	-- XYZ[0] = X, XYZ[1] = Y, XYZ[2] = Z
 * OUTPUT 	-- Spher[0] = r, Spher[1] = theta, Spher[2] = phi
 */
void SphericalToCart(double * XYZ, double* sphere)
{
	double rou = sphere[0]*sin(sphere[2]*(M_PI/180.0));
	XYZ[0] = rou*cos(sphere[1]*(M_PI/180.0));
	XYZ[1] = rou*sin(sphere[1]*(M_PI/180.0));
	XYZ[2] = sphere[0]*cos(sphere[2]*(M_PI/180.0));
}
